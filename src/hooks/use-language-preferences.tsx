
import { useState, useEffect } from 'react';

interface LanguagePreferences {
  language: string;
  setLanguage: (lang: string) => void;
  availableLanguages: { code: string; name: string; flag: string }[];
}

const LANGUAGE_COOKIE_KEY = 'luvvix_preferred_language';

export const useLanguagePreferences = (): LanguagePreferences => {
  const [language, setLanguageState] = useState('fr');

  const availableLanguages = [
    { code: 'fr', name: 'FranÃ§ais', flag: 'ðŸ‡«ðŸ‡·' },
    { code: 'en', name: 'English', flag: 'ðŸ‡ºðŸ‡¸' },
    { code: 'es', name: 'EspaÃ±ol', flag: 'ðŸ‡ªðŸ‡¸' },
    { code: 'de', name: 'Deutsch', flag: 'ðŸ‡©ðŸ‡ª' },
    { code: 'it', name: 'Italiano', flag: 'ðŸ‡®ðŸ‡¹' },
    { code: 'pt', name: 'PortuguÃªs', flag: 'ðŸ‡µðŸ‡¹' },
    { code: 'ar', name: 'Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©', flag: 'ðŸ‡¸ðŸ‡¦' },
    { code: 'zh', name: 'ä¸­æ–‡', flag: 'ðŸ‡¨ðŸ‡³' },
    { code: 'ja', name: 'æ—¥æœ¬èªž', flag: 'ðŸ‡¯ðŸ‡µ' },
    { code: 'ko', name: 'í•œêµ­ì–´', flag: 'ðŸ‡°ðŸ‡·' }
  ];

  // Charger la langue depuis les cookies au dÃ©marrage
  useEffect(() => {
    try {
      const savedLanguage = localStorage.getItem(LANGUAGE_COOKIE_KEY);
      if (savedLanguage && availableLanguages.some(lang => lang.code === savedLanguage)) {
        setLanguageState(savedLanguage);
      }
    } catch (error) {
      console.log('Error loading language preference:', error);
    }
  }, []);

  const setLanguage = (lang: string) => {
    try {
      localStorage.setItem(LANGUAGE_COOKIE_KEY, lang);
      setLanguageState(lang);
    } catch (error) {
      console.error('Error saving language preference:', error);
    }
  };

  return {
    language,
    setLanguage,
    availableLanguages
  };
};
