
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const geminiApiKey = Deno.env.get('GEMINI_API_KEY');

const supabase = createClient(supabaseUrl, supabaseKey);

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { action, courseData } = await req.json();
    console.log('üéØ Action demand√©e:', action);

    if (action === 'generate_complete_course') {
      return await generateCompleteCourse(courseData);
    }

    return new Response(
      JSON.stringify({ error: 'Action non reconnue' }),
      { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});

async function generateCompleteCourse(courseData: any) {
  console.log('üöÄ G√©n√©ration d\'un cours complet:', courseData);

  try {
    let courseStructure;
    
    // V√©rifier que Gemini est disponible
    if (!geminiApiKey) {
      throw new Error('Cl√© API Gemini manquante - impossible de g√©n√©rer des le√ßons de qualit√©');
    }

    // G√©n√©rer TOUJOURS avec Gemini (pas de fallback)
    try {
      courseStructure = await generateCourseWithGemini(courseData);
      console.log('üìö Structure du cours g√©n√©r√©e avec Gemini:', courseStructure.title);
    } catch (geminiError) {
      console.error('‚ùå Erreur Gemini critique:', geminiError.message);
      throw new Error(`Impossible de g√©n√©rer le cours avec Gemini: ${geminiError.message}`);
    }

    // Cr√©er le cours dans la base de donn√©es
    const { data: course, error: courseError } = await supabase
      .from('courses')
      .insert({
        title: courseStructure.title,
        description: courseStructure.description,
        category: courseData.category,
        difficulty_level: courseData.difficulty,
        duration_minutes: courseStructure.estimatedDuration,
        learning_objectives: courseStructure.learningObjectives,
        prerequisites: courseStructure.prerequisites,
        tags: courseStructure.tags,
        ai_generated: true,
        status: 'active'
      })
      .select()
      .single();

    if (courseError) {
      console.error('‚ùå Erreur cr√©ation cours:', courseError);
      throw courseError;
    }

    console.log('‚úÖ Cours cr√©√©:', course.title);

    // Cr√©er les le√ßons d√©taill√©es
    const lessons = await createDetailedLessons(course.id, courseStructure.lessons);
    console.log('üìñ Le√ßons cr√©√©es:', lessons.length);

    // G√©n√©rer l'examen final avec 20 questions maximum
    await generateFinalAssessment(course.id, courseStructure, courseData);

    return new Response(
      JSON.stringify({
        success: true,
        course: course,
        lessons: lessons,
        message: `Cours "${course.title}" cr√©√© avec ${lessons.length} le√ßons compl√®tes et un examen final de 20 questions`
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration cours:', error);
    throw error;
  }
}

async function generateCourseWithGemini(courseData: any) {
  console.log('üß† G√©n√©ration avec Gemini...');

  const prompt = `Tu es un expert p√©dagogue et cr√©ateur de contenu √©ducatif professionnel. Cr√©e un cours EXCEPTIONNEL et COMPLET sur le sujet suivant :

SUJET : ${courseData.topic}
CAT√âGORIE : ${courseData.category}
NIVEAU : ${courseData.difficulty}

INSTRUCTIONS CRITIQUES :
1. Cr√©e un cours de TR√àS HAUTE QUALIT√â avec 8-12 le√ßons substantielles
2. Chaque le√ßon doit contenir 2000-3000 mots de contenu riche et informatif
3. Utilise un HTML propre et bien format√© avec : <h1>, <h2>, <h3>, <p>, <strong>, <em>, <ul>, <li>, <code>, <pre>, <blockquote>
4. Inclus des exemples CONCRETS, des cas pratiques et des exercices
5. Structure le contenu de mani√®re progressive et logique
6. Cr√©e du contenu ORIGINAL et ENGAGEANT, pas du texte g√©n√©rique
7. Adapte le niveau de complexit√© au niveau sp√©cifi√© : ${courseData.difficulty}
8. Pour les sujets techniques, inclus du code et des exemples pratiques
9. Pour les sujets th√©oriques, utilise des √©tudes de cas et des applications r√©elles
10. Chaque le√ßon doit √™tre compl√®te et autonome

STRUCTURE ATTENDUE pour chaque le√ßon :
- Introduction claire et motivante du sujet (200-300 mots)
- Concepts fondamentaux expliqu√©s en d√©tail (800-1000 mots)
- Exemples pratiques d√©taill√©s avec explications (500-700 mots)
- Exercices ou applications concr√®tes (300-400 mots)
- R√©sum√© des points cl√©s et r√©vision (200-300 mots)
- Transition vers la le√ßon suivante (100 mots)

QUALIT√â REQUISE :
- Contenu professionnel et expert
- Explications claires et progressives
- Exemples r√©els et pertinents
- Exercices pratiques stimulants
- Structure logique et coh√©rente

R√©ponds UNIQUEMENT avec ce JSON (sans texte avant ou apr√®s) :
{
  "title": "Titre accrocheur et professionnel du cours",
  "description": "Description d√©taill√©e et motivante (400-500 mots)",
  "estimatedDuration": 720,
  "learningObjectives": [
    "Objectif pr√©cis et mesurable 1",
    "Objectif pr√©cis et mesurable 2",
    "Objectif pr√©cis et mesurable 3",
    "Objectif pr√©cis et mesurable 4",
    "Objectif pr√©cis et mesurable 5"
  ],
  "prerequisites": ["Pr√©requis 1", "Pr√©requis 2"],
  "tags": ["tag1", "tag2", "tag3", "tag4", "tag5"],
  "lessons": [
    {
      "title": "Titre engageant de la le√ßon",
      "content": "<h1>Titre de la le√ßon</h1><h2>Introduction</h2><p>Contenu riche et d√©taill√© d'au moins 2000 mots avec exemples concrets, cas pratiques, exercices et explications approfondies...</p><h2>Concepts fondamentaux</h2><p>Explication tr√®s d√©taill√©e...</p><h3>Exemple pratique d√©taill√©</h3><pre><code>Code ou exemple concret avec explications</code></pre><h2>Application pratique</h2><p>Exercices d√©taill√©s et cas d'usage...</p><h2>Points cl√©s √† retenir</h2><ul><li>Point important 1</li><li>Point important 2</li></ul><h2>Pour aller plus loin</h2><p>Ressources et approfondissements...</p>",
      "duration": 90,
      "type": "theory",
      "objectives": ["Objectif sp√©cifique 1", "Objectif sp√©cifique 2"]
    }
  ]
}`;

  const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=${geminiApiKey}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      contents: [{
        parts: [{ text: prompt }]
      }],
      generationConfig: {
        temperature: 0.8,
        topK: 40,
        topP: 0.9,
        maxOutputTokens: 8192
      }
    })
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Erreur API Gemini: ${response.status} ${response.statusText} - ${errorText}`);
  }

  const result = await response.json();
  console.log('üìù R√©ponse de Gemini re√ßue');
  
  if (!result.candidates?.[0]?.content?.parts?.[0]?.text) {
    throw new Error('R√©ponse invalide de Gemini - pas de contenu g√©n√©r√©');
  }

  const generatedText = result.candidates[0].content.parts[0].text;
  
  // Extraire le JSON de la r√©ponse
  const jsonMatch = generatedText.match(/\{[\s\S]*\}/);
  if (jsonMatch) {
    try {
      const courseStructure = JSON.parse(jsonMatch[0]);
      
      // V√©rifier que les le√ßons ont du contenu substantiel
      if (!courseStructure.lessons || courseStructure.lessons.length === 0) {
        throw new Error('Aucune le√ßon g√©n√©r√©e par Gemini');
      }
      
      for (const lesson of courseStructure.lessons) {
        if (!lesson.content || lesson.content.length < 1000) {
          throw new Error(`Le√ßon "${lesson.title}" trop courte - contenu insuffisant`);
        }
      }
      
      console.log('‚úÖ Structure pars√©e avec succ√®s:', courseStructure.title);
      console.log('üìä Nombre de le√ßons:', courseStructure.lessons.length);
      console.log('üìè Longueur moyenne des le√ßons:', Math.round(courseStructure.lessons.reduce((sum, l) => sum + l.content.length, 0) / courseStructure.lessons.length));
      
      return courseStructure;
    } catch (parseError) {
      console.error('‚ö†Ô∏è Erreur parsing JSON:', parseError.message);
      throw new Error('Impossible de parser la r√©ponse JSON de Gemini');
    }
  }

  throw new Error('Aucun JSON valide trouv√© dans la r√©ponse Gemini');
}

async function generateFinalAssessment(courseId: string, courseStructure: any, courseData: any) {
  console.log('üìù G√©n√©ration de l\'examen final...');

  if (!geminiApiKey) {
    console.warn('‚ö†Ô∏è Pas de cl√© Gemini pour l\'examen final');
    return;
  }

  try {
    const lessonsContent = courseStructure.lessons.map(l => `${l.title}: ${l.content.substring(0, 1000)}`).join('\n\n');

    const examPrompt = `Tu es un expert en √©valuation p√©dagogique. Cr√©e un examen final de EXACTEMENT 20 questions √† choix multiples pour √©valuer la ma√Ætrise de ce cours :

COURS : ${courseStructure.title}
DESCRIPTION : ${courseStructure.description}
CAT√âGORIE : ${courseData.category}
NIVEAU : ${courseData.difficulty}

CONTENU DES LE√áONS (extraits) :
${lessonsContent.substring(0, 4000)}

INSTRUCTIONS IMPORTANTES :
1. Cr√©e EXACTEMENT 20 questions QCM de haute qualit√©
2. Couvre TOUT le contenu du cours de mani√®re √©quilibr√©e
3. Varie les niveaux : connaissance (25%), compr√©hension (35%), application (25%), analyse (15%)
4. 4 choix de r√©ponse par question, avec UNE seule bonne r√©ponse
5. Inclus des explications d√©taill√©es pour chaque r√©ponse
6. Questions pr√©cises et sans ambigu√Øt√©
7. R√©partition √©quitable sur toutes les le√ßons

R√©ponds au format JSON suivant :
{
  "questions": [
    {
      "id": "q1",
      "question": "Question pr√©cise et claire ?",
      "options": ["Option A", "Option B", "Option C", "Option D"],
      "correct_answer": 0,
      "explanation": "Explication d√©taill√©e de pourquoi cette r√©ponse est correcte et les autres incorrectes",
      "category": "Cat√©gorie du sujet",
      "difficulty": "beginner/intermediate/advanced",
      "points": 5
    }
  ]
}`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{
          parts: [{ text: examPrompt }]
        }],
        generationConfig: {
          temperature: 0.3,
          topK: 40,
          topP: 0.8,
          maxOutputTokens: 8192
        }
      })
    });

    if (!response.ok) {
      console.warn('‚ö†Ô∏è Erreur g√©n√©ration examen:', response.status);
      return;
    }

    const result = await response.json();
    
    if (!result.candidates?.[0]?.content?.parts?.[0]?.text) {
      console.warn('‚ö†Ô∏è Pas de contenu pour l\'examen');
      return;
    }

    const examText = result.candidates[0].content.parts[0].text;
    const examMatch = examText.match(/\{[\s\S]*\}/);
    
    if (examMatch) {
      try {
        const examData = JSON.parse(examMatch[0]);
        
        // V√©rifier qu'on a exactement 20 questions
        if (examData.questions && examData.questions.length !== 20) {
          console.warn(`‚ö†Ô∏è Nombre de questions incorrect: ${examData.questions.length}, attendu: 20`);
          // Tronquer ou compl√©ter pour avoir exactement 20 questions
          if (examData.questions.length > 20) {
            examData.questions = examData.questions.slice(0, 20);
          }
        }

        // Cr√©er l'√©valuation dans la base de donn√©es
        const { data: assessment, error: assessmentError } = await supabase
          .from('course_assessments')
          .insert({
            course_id: courseId,
            title: `Examen final - ${courseStructure.title}`,
            description: '√âvaluation finale pour valider la ma√Ætrise du cours',
            questions: examData.questions,
            total_questions: 20,
            passing_score: 70,
            time_limit_minutes: 90,
            ai_generated: true
          })
          .select()
          .single();

        if (assessmentError) {
          console.error('‚ùå Erreur cr√©ation examen:', assessmentError);
        } else {
          console.log('‚úÖ Examen final cr√©√© avec 20 questions');
        }
      } catch (parseError) {
        console.error('‚ùå Erreur parsing examen:', parseError.message);
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration examen final:', error);
  }
}

async function createDetailedLessons(courseId: string, lessonsData: any[]) {
  console.log('üìñ Cr√©ation des le√ßons d√©taill√©es...');

  const lessons = lessonsData.map((lesson, index) => ({
    course_id: courseId,
    title: lesson.title,
    content: lesson.content,
    lesson_order: index + 1,
    duration_minutes: lesson.duration || 90,
    lesson_type: lesson.type || 'theory'
  }));

  const { data: insertedLessons, error } = await supabase
    .from('lessons')
    .insert(lessons)
    .select();

  if (error) {
    console.error('‚ùå Erreur insertion le√ßons:', error);
    throw error;
  }

  console.log('‚úÖ Le√ßons ins√©r√©es:', insertedLessons.length);
  return insertedLessons;
}
