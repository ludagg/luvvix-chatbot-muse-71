import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const geminiApiKey = Deno.env.get('GEMINI_API_KEY');

// Fonction pour extraire le JSON de la r√©ponse Gemini
function extractJSON(text: string): any {
  console.log('üîç Texte brut re√ßu:', text.substring(0, 200) + '...');
  
  // Nettoyer le texte
  const cleanText = text.trim();
  
  // Chercher les accolades ouvrantes et fermantes
  const firstBrace = cleanText.indexOf('{');
  const lastBrace = cleanText.lastIndexOf('}');
  
  if (firstBrace === -1 || lastBrace === -1 || firstBrace >= lastBrace) {
    throw new Error('Aucun JSON valide trouv√© dans la r√©ponse');
  }
  
  const jsonString = cleanText.substring(firstBrace, lastBrace + 1);
  console.log('üìã JSON extrait:', jsonString.substring(0, 200) + '...');
  
  try {
    return JSON.parse(jsonString);
  } catch (error) {
    console.error('‚ùå Erreur parsing JSON:', error);
    console.error('üìÑ Contenu probl√©matique:', jsonString.substring(0, 500));
    throw new Error('Format JSON invalide: ' + error.message);
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    const { action, courseData, category, difficulty, userId } = await req.json();

    if (action === 'generate_course') {
      console.log('üéØ G√©n√©ration d\'un nouveau cours:', courseData.topic);
      
      // √âtape 1: G√©n√©rer le plan du cours avec un prompt plus strict
      const planPrompt = `Tu es LuvviX AI, expert p√©dagogique. Cr√©e un PLAN D√âTAILL√â pour un cours sur "${courseData.topic}" (${category}, niveau ${difficulty}).

IMPORTANT: R√©ponds UNIQUEMENT avec un JSON valide, rien d'autre. Pas de texte avant ou apr√®s le JSON.

Format JSON requis:
{
  "title": "Titre du cours",
  "description": "Description en 2-3 phrases",
  "duration_minutes": 240,
  "learning_objectives": ["objectif 1", "objectif 2", "objectif 3"],
  "prerequisites": ["pr√©requis 1", "pr√©requis 2"],
  "tags": ["tag1", "tag2", "tag3"],
  "lessons_plan": [
    {
      "title": "Introduction aux concepts",
      "lesson_order": 1,
      "duration_minutes": 30,
      "lesson_type": "theory",
      "key_points": ["point 1", "point 2", "point 3"]
    },
    {
      "title": "Quiz - Validation des concepts",
      "lesson_order": 2,
      "duration_minutes": 15,
      "lesson_type": "quiz",
      "quiz_topics": ["sujet 1", "sujet 2"]
    }
  ]
}

Minimum 6 le√ßons alternant th√©orie/quiz. JSON uniquement !`;

      const planResponse = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{ parts: [{ text: planPrompt }] }],
          generationConfig: { 
            temperature: 0.7,
            maxOutputTokens: 2000
          }
        }),
      });

      if (!planResponse.ok) {
        throw new Error(`Erreur Gemini plan: ${planResponse.status}`);
      }

      const planData = await planResponse.json();
      console.log('üìã Plan g√©n√©r√© par Gemini');
      
      let coursePlan;
      try {
        const rawText = planData.candidates[0].content.parts[0].text;
        coursePlan = extractJSON(rawText);
        
        // Validation de la structure
        if (!coursePlan.title || !coursePlan.lessons_plan || !Array.isArray(coursePlan.lessons_plan)) {
          throw new Error('Structure du plan invalide');
        }
        
        console.log('‚úÖ Plan valid√©:', coursePlan.title);
      } catch (parseError) {
        console.error('‚ùå Erreur parsing plan:', parseError);
        throw new Error('Format de r√©ponse invalide de Gemini: ' + parseError.message);
      }

      // Ins√©rer le cours d'abord
      console.log('üíæ Insertion du cours en base...');
      const { data: course, error: courseError } = await supabase
        .from('courses')
        .insert({
          title: coursePlan.title,
          description: coursePlan.description,
          category: category,
          difficulty_level: difficulty,
          duration_minutes: coursePlan.duration_minutes,
          learning_objectives: coursePlan.learning_objectives || [],
          prerequisites: coursePlan.prerequisites || [],
          tags: coursePlan.tags || [],
          ai_generated: true,
          status: 'active'
        })
        .select()
        .single();

      if (courseError) {
        console.error('‚ùå Erreur insertion cours:', courseError);
        throw courseError;
      }

      console.log('‚úÖ Cours cr√©√©:', course.title);

      // √âtape 2: G√©n√©rer chaque le√ßon individuellement
      for (const lessonPlan of coursePlan.lessons_plan) {
        console.log(`üìù G√©n√©ration le√ßon: ${lessonPlan.title}`);
        
        if (lessonPlan.lesson_type === 'theory') {
          // G√©n√©rer le contenu th√©orique d√©taill√©
          const contentPrompt = `Tu es LuvviX AI. G√©n√®re le CONTENU COMPLET pour la le√ßon "${lessonPlan.title}" du cours "${coursePlan.title}".

Points cl√©s √† couvrir: ${lessonPlan.key_points?.join(', ') || 'Contenu g√©n√©ral'}

Cr√©e un contenu de 1000+ mots en Markdown avec:
- Introduction engageante
- Explications d√©taill√©es avec exemples
- Analogies et cas pratiques
- Mise en forme markdown (titres, listes, code si pertinent)
- R√©sum√© des points cl√©s

Niveau: ${difficulty}. Sois p√©dagogique et pr√©cis. R√©ponds directement avec le contenu Markdown, sans introduction.`;

          try {
            const contentResponse = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                contents: [{ parts: [{ text: contentPrompt }] }],
                generationConfig: { 
                  temperature: 0.8,
                  maxOutputTokens: 4000
                }
              }),
            });

            if (!contentResponse.ok) {
              console.error(`‚ùå Erreur g√©n√©ration contenu le√ßon ${lessonPlan.title}`);
              continue;
            }

            const contentData = await contentResponse.json();
            const lessonContent = contentData.candidates[0].content.parts[0].text;

            // Ins√©rer la le√ßon
            const { data: lesson, error: lessonError } = await supabase
              .from('lessons')
              .insert({
                course_id: course.id,
                title: lessonPlan.title,
                content: lessonContent,
                lesson_order: lessonPlan.lesson_order,
                duration_minutes: lessonPlan.duration_minutes || 30,
                lesson_type: lessonPlan.lesson_type
              })
              .select()
              .single();

            if (lessonError) {
              console.error('‚ùå Erreur insertion le√ßon:', lessonError);
              continue;
            }

            console.log(`‚úÖ Le√ßon cr√©√©e: ${lesson.title}`);

          } catch (error) {
            console.error(`‚ùå Erreur g√©n√©ration le√ßon ${lessonPlan.title}:`, error);
            continue;
          }

        } else if (lessonPlan.lesson_type === 'quiz') {
          // G√©n√©rer le quiz avec un prompt plus strict
          const quizPrompt = `G√©n√®re un quiz pour "${lessonPlan.title}" sur les sujets: ${lessonPlan.quiz_topics?.join(', ') || 'Validation des connaissances'}.

IMPORTANT: R√©ponds UNIQUEMENT avec un JSON valide, rien d'autre.

Format JSON requis:
{
  "questions": [
    {
      "question": "Question claire et pr√©cise?",
      "type": "multiple_choice",
      "options": ["Option A", "Option B", "Option C", "Option D"],
      "correct_answer": 0,
      "explanation": "Explication pourquoi cette r√©ponse est correcte"
    }
  ]
}

G√©n√®re exactement 5 questions de difficult√© ${difficulty}. JSON uniquement !`;

          try {
            const quizResponse = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                contents: [{ parts: [{ text: quizPrompt }] }],
                generationConfig: { 
                  temperature: 0.6,
                  maxOutputTokens: 2000
                }
              }),
            });

            if (!quizResponse.ok) {
              console.error(`‚ùå Erreur g√©n√©ration quiz ${lessonPlan.title}`);
              continue;
            }

            const quizData = await quizResponse.json();
            
            let quizContent;
            try {
              const rawQuizText = quizData.candidates[0].content.parts[0].text;
              quizContent = extractJSON(rawQuizText);
              
              // Validation
              if (!quizContent.questions || !Array.isArray(quizContent.questions) || quizContent.questions.length === 0) {
                throw new Error('Structure de quiz invalide');
              }
              
              console.log(`‚úÖ Quiz valid√©: ${quizContent.questions.length} questions`);
            } catch (quizParseError) {
              console.error(`‚ùå Erreur parsing quiz ${lessonPlan.title}:`, quizParseError);
              continue;
            }

            // Ins√©rer la le√ßon quiz
            const { data: lesson, error: lessonError } = await supabase
              .from('lessons')
              .insert({
                course_id: course.id,
                title: lessonPlan.title,
                content: 'Quiz de validation des connaissances',
                lesson_order: lessonPlan.lesson_order,
                duration_minutes: lessonPlan.duration_minutes || 15,
                lesson_type: lessonPlan.lesson_type
              })
              .select()
              .single();

            if (lessonError) {
              console.error('‚ùå Erreur insertion le√ßon quiz:', lessonError);
              continue;
            }

            // Ins√©rer le quiz
            const { error: quizError } = await supabase
              .from('quizzes')
              .insert({
                lesson_id: lesson.id,
                title: lessonPlan.title,
                questions: quizContent.questions,
                passing_score: 70,
                max_attempts: 3
              });

            if (quizError) {
              console.error('‚ùå Erreur insertion quiz:', quizError);
            } else {
              console.log(`‚úÖ Quiz cr√©√©: ${lesson.title}`);
            }

          } catch (error) {
            console.error(`‚ùå Erreur g√©n√©ration quiz ${lessonPlan.title}:`, error);
            continue;
          }
        }
      }

      console.log('üéâ Cours g√©n√©r√© avec succ√®s:', course.title);

      return new Response(JSON.stringify({ 
        success: true, 
        course: course,
        message: `Cours "${course.title}" g√©n√©r√© avec succ√®s par LuvviX AI`
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });

    } else if (action === 'auto_generate_hourly') {
      // G√©n√©ration automatique horaire
      const topics = [
        'Les bases de Python pour d√©butants',
        'Introduction aux r√©seaux informatiques',
        'Bases de donn√©es relationnelles avec SQL',
        'Intelligence Artificielle et Machine Learning',
        'D√©veloppement web avec React',
        'Cybers√©curit√© fondamentale',
        'Programmation orient√©e objet',
        'Introduction au Cloud Computing',
        'Git et contr√¥le de version',
        'Algorithmes et structures de donn√©es',
        'JavaScript ES6+ et fonctionnalit√©s modernes',
        'Design UX/UI pour d√©veloppeurs',
        'Docker et conteneurisation',
        'APIs REST et GraphQL',
        'Testing et qualit√© logicielle'
      ];

      const categories = [
        'Informatique fondamentale',
        'Programmation Web',
        'Intelligence Artificielle',
        'Base de donn√©es',
        'Cybers√©curit√©'
      ];

      const difficulties = ['beginner', 'intermediate', 'advanced'];

      const randomTopic = topics[Math.floor(Math.random() * topics.length)];
      const randomCategory = categories[Math.floor(Math.random() * categories.length)];
      const randomDifficulty = difficulties[Math.floor(Math.random() * difficulties.length)];

      console.log('ü§ñ G√©n√©ration automatique:', randomTopic);

      // Appel r√©cursif pour g√©n√©rer le cours
      const autoGenRequest = new Request(req.url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'generate_course',
          courseData: { topic: randomTopic },
          category: randomCategory,
          difficulty: randomDifficulty
        })
      });

      return await serve(autoGenRequest);

    } else if (action === 'generate_adaptive_path') {
      const { userId } = await req.json();

      const { data: enrollments } = await supabase
        .from('enrollments')
        .select('*, courses(*)')
        .eq('user_id', userId);

      const { data: analytics } = await supabase
        .from('learning_analytics')
        .select('*')
        .eq('user_id', userId)
        .order('timestamp', { ascending: false })
        .limit(50);

      const pathPrompt = `Cr√©e un parcours d'apprentissage personnalis√© pour cet utilisateur:

Cours termin√©s: ${JSON.stringify(enrollments?.filter(e => e.completed_at))}
Activit√© r√©cente: ${JSON.stringify(analytics?.slice(0, 10))}

IMPORTANT: R√©ponds UNIQUEMENT avec un JSON valide.

Format JSON requis:
{
  "name": "Nom du parcours",
  "description": "Description personnalis√©e",
  "course_sequence": ["course_id1", "course_id2"],
  "reasoning": "Pourquoi ce parcours"
}`;

      const pathResponse = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{ parts: [{ text: pathPrompt }] }],
          generationConfig: { temperature: 0.6 }
        }),
      });

      const pathData = await pathResponse.json();
      let pathContent;
      try {
        const rawPathText = pathData.candidates[0].content.parts[0].text;
        pathContent = extractJSON(rawPathText);
      } catch (error) {
        throw new Error('Erreur g√©n√©ration parcours adaptatif: ' + error.message);
      }

      const { data: learningPath } = await supabase
        .from('learning_paths')
        .insert({
          user_id: userId,
          name: pathContent.name,
          description: pathContent.description,
          course_sequence: pathContent.course_sequence,
          ai_personalization: { reasoning: pathContent.reasoning }
        })
        .select()
        .single();

      return new Response(JSON.stringify({ 
        success: true, 
        learning_path: learningPath
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    return new Response(JSON.stringify({ error: 'Action non reconnue' }), {
      status: 400,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Erreur gestionnaire de cours IA:', error);
    return new Response(JSON.stringify({ 
      error: error.message || 'Erreur interne du serveur'
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
