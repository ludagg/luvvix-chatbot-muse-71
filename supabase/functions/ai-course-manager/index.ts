
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const geminiApiKey = Deno.env.get('GEMINI_API_KEY');

const supabase = createClient(supabaseUrl, supabaseKey);

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { action, courseData } = await req.json();
    console.log('üéØ Action demand√©e:', action);

    if (action === 'generate_complete_course') {
      return await generateCompleteCourse(courseData);
    }

    if (action === 'auto_generate_hourly') {
      return await generateHourlyCourse();
    }

    return new Response(
      JSON.stringify({ error: 'Action non reconnue' }),
      { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('‚ùå Erreur gestionnaire de cours IA:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});

async function generateHourlyCourse() {
  console.log('üïê G√©n√©ration automatique de cours toutes les heures...');
  
  const topics = [
    { topic: "D√©veloppement Web avec React", category: "Programmation Web", difficulty: "intermediate" },
    { topic: "Intelligence Artificielle et Machine Learning", category: "Intelligence Artificielle", difficulty: "advanced" },
    { topic: "Cybers√©curit√© pour Entreprises", category: "Cybers√©curit√©", difficulty: "intermediate" },
    { topic: "Bases de Donn√©es NoSQL", category: "Base de donn√©es", difficulty: "beginner" },
    { topic: "DevOps et CI/CD", category: "DevOps", difficulty: "advanced" },
    { topic: "D√©veloppement Mobile Flutter", category: "D√©veloppement Mobile", difficulty: "intermediate" },
    { topic: "Cloud Computing AWS", category: "Cloud Computing", difficulty: "advanced" },
    { topic: "Data Science avec Python", category: "Data Science", difficulty: "intermediate" }
  ];

  const randomTopic = topics[Math.floor(Math.random() * topics.length)];
  
  try {
    const result = await generateCompleteCourse({ 
      action: 'generate_complete_course',
      courseData: randomTopic 
    });
    
    return new Response(JSON.stringify({
      success: true,
      message: 'Cours g√©n√©r√© automatiquement par LuvviX AI',
      course: result
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration automatique:', error);
    throw error;
  }
}

async function generateCompleteCourse(courseData: any) {
  console.log('üöÄ G√©n√©ration compl√®te de cours premium:', courseData);

  try {
    if (!geminiApiKey) {
      throw new Error('Cl√© API Gemini manquante');
    }

    // √âtape 1: G√©n√©rer le plan d√©taill√© du cours
    const coursePlan = await generateCoursePlan(courseData);
    console.log('üìã Plan de cours g√©n√©r√© avec', coursePlan.lessons.length, 'le√ßons');

    // √âtape 2: Cr√©er le cours dans la base de donn√©es
    const { data: course, error: courseError } = await supabase
      .from('courses')
      .insert({
        title: coursePlan.title,
        description: coursePlan.description,
        category: courseData.category,
        difficulty_level: courseData.difficulty,
        duration_minutes: coursePlan.estimatedDuration,
        learning_objectives: coursePlan.learningObjectives,
        prerequisites: coursePlan.prerequisites,
        tags: coursePlan.tags,
        ai_generated: true,
        status: 'active'
      })
      .select()
      .single();

    if (courseError) {
      console.error('‚ùå Erreur cr√©ation cours:', courseError);
      throw courseError;
    }

    console.log('‚úÖ Cours cr√©√©:', course.title);

    // √âtape 3: G√©n√©rer chaque le√ßon individuellement avec Gemini
    const detailedLessons = await generateDetailedLessons(coursePlan.lessons, coursePlan, courseData);
    
    // √âtape 4: Sauvegarder les le√ßons
    const lessons = await createDetailedLessons(course.id, detailedLessons);
    console.log('üìñ Le√ßons cr√©√©es:', lessons.length);

    // √âtape 5: G√©n√©rer l'√©valuation finale
    await generateFinalAssessment(course.id, coursePlan, courseData, detailedLessons);

    return new Response(
      JSON.stringify({
        success: true,
        course: course,
        lessons: lessons,
        message: `Cours premium "${course.title}" cr√©√© avec ${lessons.length} le√ßons ultra-d√©taill√©es`
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration cours:', error);
    throw error;
  }
}

async function generateCoursePlan(courseData: any) {
  console.log('üìã G√©n√©ration du plan de cours...');

  const planPrompt = `Tu es un expert p√©dagogue de renomm√©e mondiale. Cr√©e un plan de cours EXCEPTIONNEL sur le sujet suivant :

SUJET : ${courseData.topic}
CAT√âGORIE : ${courseData.category}  
NIVEAU : ${courseData.difficulty}

INSTRUCTIONS CRITIQUES :
1. Cr√©e un plan structur√© avec 8-12 le√ßons progressives
2. Chaque le√ßon doit avoir un titre pr√©cis et des objectifs clairs
3. Le cours doit √™tre de qualit√© universitaire
4. Progression logique du simple au complexe
5. Dur√©e r√©aliste pour chaque le√ßon (45-90 min)

R√©ponds UNIQUEMENT en JSON valide, sans texte avant ou apr√®s :
{
  "title": "Titre professionnel du cours",
  "description": "Description compl√®te et engageante du cours (400-500 mots)",
  "estimatedDuration": 720,
  "learningObjectives": [
    "Objectif mesurable 1",
    "Objectif mesurable 2", 
    "Objectif mesurable 3",
    "Objectif mesurable 4",
    "Objectif mesurable 5"
  ],
  "prerequisites": ["Pr√©requis 1", "Pr√©requis 2"],
  "tags": ["tag1", "tag2", "tag3", "tag4", "tag5"],
  "lessons": [
    {
      "title": "Introduction et Concepts Fondamentaux",
      "objectives": ["Objectif 1", "Objectif 2"],
      "duration": 60,
      "type": "theory",
      "outline": "Plan d√©taill√© de la le√ßon avec les points cl√©s √† couvrir"
    }
  ]
}`;

  const response = await callGeminiAPI(planPrompt, 0.7);
  const coursePlan = parseGeminiResponse(response);
  
  if (!coursePlan.lessons || coursePlan.lessons.length === 0) {
    throw new Error('Plan de cours invalide - aucune le√ßon g√©n√©r√©e');
  }

  return coursePlan;
}

async function generateDetailedLessons(lessonPlans: any[], coursePlan: any, courseData: any) {
  console.log('üìö G√©n√©ration d√©taill√©e des le√ßons...');
  
  const detailedLessons = [];
  
  for (let i = 0; i < lessonPlans.length; i++) {
    const lesson = lessonPlans[i];
    console.log(`üîÑ G√©n√©ration le√ßon ${i + 1}/${lessonPlans.length}: ${lesson.title}`);
    
    const lessonPrompt = `Tu es un expert p√©dagogue de niveau mondial. R√©dige une le√ßon EXCEPTIONNELLE et COMPL√àTE :

COURS : ${coursePlan.title}
LE√áON ${i + 1} : ${lesson.title}
NIVEAU : ${courseData.difficulty}
OBJECTIFS : ${lesson.objectives?.join(', ') || 'Non sp√©cifi√©s'}
PLAN : ${lesson.outline || 'Plan libre'}

INSTRUCTIONS CRITIQUES :
1. Contenu de 3000-4000 mots minimum
2. HTML propre et bien structur√©
3. Exemples concrets et pratiques
4. Exercices interactifs
5. Cas d'usage r√©els
6. Qualit√© professionnelle

Structure requise :
- Introduction motivante (300-400 mots)
- Concepts th√©oriques d√©taill√©s (1500-2000 mots)
- Exemples pratiques avec code/d√©mos (800-1000 mots)
- Exercices et applications (400-500 mots)
- Synth√®se et points cl√©s (200-300 mots)

R√©ponds UNIQUEMENT en JSON valide :
{
  "title": "${lesson.title}",
  "content": "<h1>${lesson.title}</h1><h2>Introduction</h2><p>Contenu HTML ultra-d√©taill√© avec exemples, exercices, et explications approfondies...</p>",
  "duration": ${lesson.duration || 75},
  "type": "${lesson.type || 'theory'}",
  "objectives": ${JSON.stringify(lesson.objectives || [])}
}`;

    try {
      const response = await callGeminiAPI(lessonPrompt, 0.8);
      const detailedLesson = parseGeminiResponse(response);
      
      if (!detailedLesson.content || detailedLesson.content.length < 2000) {
        console.warn(`‚ö†Ô∏è Le√ßon ${i + 1} trop courte, reg√©n√©ration...`);
        // Fallback avec contenu de base si la g√©n√©ration √©choue
        detailedLesson.content = generateFallbackContent(lesson, coursePlan, courseData);
      }
      
      detailedLessons.push(detailedLesson);
      
      // Pause pour √©viter les limites de taux
      await new Promise(resolve => setTimeout(resolve, 1000));
      
    } catch (error) {
      console.error(`‚ùå Erreur g√©n√©ration le√ßon ${i + 1}:`, error);
      // Fallback avec contenu de base
      detailedLessons.push({
        title: lesson.title,
        content: generateFallbackContent(lesson, coursePlan, courseData),
        duration: lesson.duration || 75,
        type: lesson.type || 'theory',
        objectives: lesson.objectives || []
      });
    }
  }
  
  return detailedLessons;
}

function generateFallbackContent(lesson: any, coursePlan: any, courseData: any) {
  return `<h1>${lesson.title}</h1>
<h2>Introduction</h2>
<p>Cette le√ßon fait partie du cours "${coursePlan.title}" et couvre les concepts essentiels de ${lesson.title.toLowerCase()}. Vous apprendrez les fondamentaux th√©oriques et pratiques n√©cessaires pour ma√Ætriser ce sujet.</p>

<h2>Objectifs de la le√ßon</h2>
<ul>
${lesson.objectives?.map((obj: string) => `<li>${obj}</li>`).join('') || '<li>Comprendre les concepts fondamentaux</li>'}
</ul>

<h2>Contenu principal</h2>
<p>Dans cette section, nous explorons en d√©tail les concepts cl√©s de ${lesson.title}. Cette approche progressive vous permettra de construire une compr√©hension solide du sujet.</p>

<h3>Concepts th√©oriques</h3>
<p>Les fondements th√©oriques sont essentiels pour une compr√©hension approfondie. Nous couvrirons les principes de base et les concepts avanc√©s selon le niveau ${courseData.difficulty}.</p>

<h3>Applications pratiques</h3>
<p>La th√©orie prend tout son sens quand elle est appliqu√©e. Voici des exemples concrets et des exercices pratiques pour renforcer votre apprentissage.</p>

<h2>Points cl√©s √† retenir</h2>
<ul>
<li>Compr√©hension des concepts fondamentaux</li>
<li>Application pratique des connaissances</li>
<li>Pr√©paration pour la le√ßon suivante</li>
</ul>

<h2>Pour aller plus loin</h2>
<p>Cette le√ßon vous pr√©pare pour la suite du cours. Les concepts abord√©s ici seront approfondis dans les le√ßons suivantes.</p>`;
}

async function callGeminiAPI(prompt: string, temperature: number = 0.7) {
  const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      contents: [{ parts: [{ text: prompt }] }],
      generationConfig: {
        temperature,
        topK: 40,
        topP: 0.9,
        maxOutputTokens: 8192
      }
    })
  });

  if (!response.ok) {
    throw new Error(`Erreur API Gemini: ${response.status}`);
  }

  const result = await response.json();
  
  if (!result.candidates?.[0]?.content?.parts?.[0]?.text) {
    throw new Error('R√©ponse Gemini invalide');
  }

  return result.candidates[0].content.parts[0].text;
}

function parseGeminiResponse(responseText: string) {
  try {
    // Nettoyer la r√©ponse et extraire le JSON
    let cleanedText = responseText.trim();
    
    // Supprimer les balises markdown si pr√©sentes
    cleanedText = cleanedText.replace(/```json\s*/g, '').replace(/```\s*/g, '');
    
    // Trouver le JSON valide
    const jsonStart = cleanedText.indexOf('{');
    const jsonEnd = cleanedText.lastIndexOf('}') + 1;
    
    if (jsonStart === -1 || jsonEnd <= jsonStart) {
      throw new Error('Aucun JSON trouv√© dans la r√©ponse');
    }
    
    const jsonText = cleanedText.substring(jsonStart, jsonEnd);
    
    // Parser le JSON
    const parsed = JSON.parse(jsonText);
    
    return parsed;
  } catch (error) {
    console.error('‚ùå Erreur parsing JSON:', error);
    console.error('üìù Texte brut:', responseText.substring(0, 500));
    throw new Error(`Erreur parsing JSON: ${error.message}`);
  }
}

async function generateFinalAssessment(courseId: string, coursePlan: any, courseData: any, lessons: any[]) {
  console.log('üéì G√©n√©ration de l\'√©valuation finale...');

  try {
    const lessonsContent = lessons.map(l => `${l.title}: ${l.content.substring(0, 800)}`).join('\n\n');

    const examPrompt = `Cr√©e un examen final EXCEPTIONNEL de 20 questions pour le cours "${coursePlan.title}".

COURS : ${coursePlan.title}
NIVEAU : ${courseData.difficulty}
CONTENU : ${lessonsContent.substring(0, 4000)}

EXIGENCES :
1. EXACTEMENT 20 questions QCM
2. Couvrir TOUT le contenu
3. Niveaux vari√©s : connaissance (25%), compr√©hension (35%), application (25%), analyse (15%)
4. Questions pr√©cises sans ambigu√Øt√©
5. Explications d√©taill√©es

R√©ponds en JSON valide :
{
  "questions": [
    {
      "id": "q1",
      "question": "Question claire et pr√©cise ?",
      "options": ["Option A", "Option B", "Option C", "Option D"],
      "correct_answer": 0,
      "explanation": "Explication d√©taill√©e de la r√©ponse correcte",
      "category": "Cat√©gorie",
      "difficulty": "beginner",
      "points": 5
    }
  ]
}`;

    const response = await callGeminiAPI(examPrompt, 0.3);
    const examData = parseGeminiResponse(response);
    
    if (!examData.questions || examData.questions.length !== 20) {
      console.warn(`‚ö†Ô∏è Nombre de questions incorrect: ${examData.questions?.length || 0}`);
      if (examData.questions?.length > 20) {
        examData.questions = examData.questions.slice(0, 20);
      }
    }

    const { data: assessment, error } = await supabase
      .from('course_assessments')
      .insert({
        course_id: courseId,
        title: `√âvaluation finale - ${coursePlan.title}`,
        description: 'Examen final pour valider la ma√Ætrise compl√®te du cours',
        questions: examData.questions || [],
        total_questions: 20,
        passing_score: 70,
        time_limit_minutes: 120,
        ai_generated: true
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erreur cr√©ation √©valuation:', error);
    } else {
      console.log('‚úÖ √âvaluation finale cr√©√©e');
    }
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration √©valuation:', error);
  }
}

async function createDetailedLessons(courseId: string, lessonsData: any[]) {
  console.log('üíæ Sauvegarde des le√ßons...');

  const lessons = lessonsData.map((lesson, index) => ({
    course_id: courseId,
    title: lesson.title,
    content: lesson.content,
    lesson_order: index + 1,
    duration_minutes: lesson.duration || 75,
    lesson_type: lesson.type || 'theory'
  }));

  const { data: insertedLessons, error } = await supabase
    .from('lessons')
    .insert(lessons)
    .select();

  if (error) {
    console.error('‚ùå Erreur insertion le√ßons:', error);
    throw error;
  }

  console.log('‚úÖ Le√ßons sauvegard√©es:', insertedLessons.length);
  return insertedLessons;
}
